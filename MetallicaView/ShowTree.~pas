unit ShowTree;

interface

uses Windows, Classes, Graphics, Forms, Controls, Grids, DBGridEh, ComCtrls,
  DB, ZAbstractRODataset, ZDataset, DataModule, StdCtrls, MDIChild, Buttons,
  Mask, DBCtrlsEh, ExtCtrls;

type
  TFormTree = class(TFormMDIChild)
    Tree: TTreeView;
    Grid: TDBGridEh;
    DSData: TDataSource;
    qData: TZReadOnlyQuery;
    qDataPL_ID: TIntegerField;
    qDataPL_HEADERID: TIntegerField;
    qDataPL_TREEID: TIntegerField;
    qDataCM_NAME: TStringField;
    qDataCM_ID: TIntegerField;
    qDataPL_PRICE: TFloatField;
    qDataPL_VALUE1: TStringField;
    qDataPL_VALUE2: TStringField;
    qDataPL_VALUE3: TStringField;
    qDataPL_VALUE4: TStringField;
    qDataPL_VALUE5: TStringField;
    qDataPL_VALUE6: TStringField;
    qDataPL_VALUE7: TStringField;
    qDataPL_VALUE8: TStringField;
    qDataPL_VALUE9: TStringField;
    qDataPL_ORDERBY: TIntegerField;
    qDataPL_DATE_UPDATE: TDateTimeField;
    qDataPL_ISCLOSED: TSmallintField;
    qDataPL_PARENT: TStringField;
    qDataPT_VALUE: TStringField;
    qDataCM_CITY: TStringField;
    qDataFl: TZReadOnlyQuery;
    Panel1: TPanel;
    Panel2: TPanel;
    Label1: TLabel;
    CBFields: TComboBox;
    BitBtnInsert: TBitBtn;
    Label2: TLabel;
    CBFilter: TComboBox;
    ButtonFilterClear: TButton;
    qDataTL_COLOR: TIntegerField;
    procedure TreeChange(Sender: TObject; Node: TTreeNode);
    procedure TreeExpanding(Sender: TObject; Node: TTreeNode;
      var AllowExpansion: Boolean);
    procedure GridCellClick(Column: TColumnEh);
    procedure GridDblClick(Sender: TObject);
    procedure GridEnter(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure GridTitleClick(Column: TColumnEh);
    procedure ButtonFilterClearClick(Sender: TObject);
    procedure CBFieldsSelect(Sender: TObject);
    procedure BitBtnInsertClick(Sender: TObject);
    procedure FormKeyUp(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure GridDrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumnEh; State: TGridDrawState);
  private
  F_FieldName1, F_FieldName2:string;
  F_Column1Name, F_Column1Title:string;
  F_CBFieldsName, F_CBFieldsTitle, F_FilterToQDataFL, F_FieldToqDataFL:string;
  F_LastSorted:string;
    procedure RefreshPrices;
    procedure AddFieldToqDataFL(SField: string);
    procedure ClearFilterOnQData;
    procedure ClearFilterOnQDataFL;
    procedure RefreshQDataFL;
    procedure AddFilterToQData(SFilter: string);
    procedure AddFilterToqDataFL(SFilter: string);
    procedure ClearFilters;
    procedure RefreshCBFields;
    procedure ClearCBFilter;
  public
  MyNode:TNodeValue;
  F_ColumnName, F_ColumnTitle:string;
  procedure SetTree;
  end;

implementation

uses SysUtils, ShowCompany, Variants, Dialogs, ShowPrice, MainForm;

{$R *.DFM}

procedure TFormTree.TreeChange(Sender: TObject; Node: TTreeNode);
var NextParent, LastParent:integer;
begin
if MyNode.ParentID=0 then LastParent:=MyNode.ID else LastParent:=MyNode.ParentID;
MyNode.ID:=Integer(Tree.Selected.Data);
if MyNode.ParentID=0 then NextParent:=MyNode.ID else NextParent:=MyNode.ParentID;
if NextParent<>LastParent
then
  begin
  ButtonFilterClear.Click;
  end
else
  begin
  RefreshPrices;
  RefreshCBFields;
  ClearCBFilter;
  end;
end;

procedure TFormTree.TreeExpanding(Sender: TObject; Node: TTreeNode;
  var AllowExpansion: Boolean);
begin
MyNode.ID:=Integer(Node.Data);
RefreshPrices;
end;

procedure TFormTree.GridCellClick(Column: TColumnEh);
begin
F_FieldName2:=F_FieldName1;
F_FieldName1:=Column.FieldName;
end;

procedure TFormTree.GridDblClick(Sender: TObject);
var LCompanyShow:TFormCompaniesShow;
    LFormPriceShow:TFormPriceShow;
begin
if (F_FieldName1='CM_NAME') and (F_FieldName2='CM_NAME')
then
  begin
  if varIsNull(qData['CM_ID']) then exit;
  LCompanyShow := TFormCompaniesShow.Create(Application);
  LCompanyShow.SetCompany(qData['CM_ID']);
//  FormMain.AddToolBttn(LCompanyShow.Caption);
  LCompanyShow.Caption := 'Компания '+qData['CM_NAME'];
  end
else
  begin
  if varIsNull(qData['CM_ID']) then exit;
  LFormPriceShow := TFormPriceShow.Create(Application);
  LFormPriceShow.SetTree(qData['PL_TREEID']);
//  FormMain.AddToolBttn(LFormPriceShow.Caption);
//  if Assigned(LFormPriceShow) then
//    SetWindowPos(LFormPriceShow.handle, HWND_TOP, 0, 0, 0, 0, SWP_NOSIZE
//     or SWP_NOMOVE or SWP_SHOWWINDOW);
  LFormPriceShow.Caption := 'Рубрика '+MyNode.Value;
  end;
end;

procedure TFormTree.GridEnter(Sender: TObject);
begin
F_FieldName1:='CM_NAME';
end;

procedure TFormTree.RefreshPrices;
var i:integer;
begin
qData.Close;
qData.ParamByName('TREEID').AsInteger:=MyNode.ID;
if MyNode.ParentID=0
then qData.ParamByName('NODE').Value:=MyNode.Value
else qData.ParamByName('NODE').Value:=MyNode.ParentValue;
qData.Open;
if MyNode.ParentID<>0
  then DM.RepaintGrid(Grid, MyNode.ParentID)
  else DM.RepaintGrid(Grid, MyNode.ID)
end;

procedure TFormTree.FormCreate(Sender: TObject);
begin
MyNode:=TNodeValue.Create;
end;

procedure TFormTree.FormDestroy(Sender: TObject);
begin
MyNode.Destroy;
end;

procedure TFormTree.SetTree;
begin
F_FieldName1:='';
F_FieldName2:='';
F_Column1Name:='';
F_Column1Title:='';
Panel1.Caption:='';
DM.TreeFulFill(Tree, true, 0);
ClearFilterOnQData;
ClearFilteronQDataFL;
RefreshPrices;
RefreshCBFields;
ClearCBFilter;
end;

procedure TFormTree.GridTitleClick(Column: TColumnEh);
begin
//qData.SortedFields:=Column.FieldName;
if F_LastSorted=Column.FieldName then
  begin
  QData.SortedFields:=Column.FieldName;
  QData.SortType:=stDescending;
  end
else
  begin
  QData.SortedFields:=Column.FieldName;
  QData.SortType:=stAscending;
  end;
F_LastSorted:=Column.FieldName;

if VarIsNull(qData['PL_ID']) then exit;
F_ColumnName:=Column.FieldName;
F_ColumnTitle:=Column.Title.Caption;
end;

procedure TFormTree.ButtonFilterClearClick(Sender: TObject);
begin
ClearFilterOnQData;
ClearFilteronQDataFL;
RefreshPrices;
RefreshCBFields;
ClearCBFilter;
Panel1.Caption:='';
end;

procedure TFormTree.ClearFilterOnQData;
begin
qData.Filter:='1=1';
qData.Filtered:=true;
end;

procedure TFormTree.ClearFilterOnQDataFL;
begin
F_FilterToQDataFL:='and 1=1';
end;

procedure TFormTree.AddFieldToqDataFL(SField: string);
begin
F_FieldToqDataFL:=SField;
end;

procedure TFormTree.RefreshCBFields;
var
  I: Integer;
begin
CBFields.Clear;
CBFields.Text:=Grid.Columns[0].Title.Caption;
for I := 0 to Grid.Columns.Count - 1 do
  begin
  if Grid.Columns[i].Title.Caption = 'Раздел' then continue;
  if Grid.Columns[i].Title.Caption = 'Подраздел' then continue;
  CBFields.Items.Add(Grid.Columns[i].Title.Caption);
  end;
CBFields.Text:='';
F_FieldToqDataFL:='1';
end;

procedure TFormTree.RefreshQDataFL;
begin
qDataFl.Close;
qDataFl.SQL.Text:='select distinct '+
F_FieldToqDataFL + ' as res from ('+
' SELECT pl_id, pl_headerid, pl.pl_treeid, pl_price, '+
' cast(:node as varchar(200)) as pl_parent, '+
' (select pt_value from prices_tree pt where pt.pt_id = pl.pl_treeid) pt_value, '+
' cm.cm_name, cm.cm_id, cm_city, pl_value1, pl_value2, pl_value3, '+
' pl_value4, pl_value5, pl_value6, pl_value7, pl_value8, pl_value9, '+
' pl_orderby, pl_date_update, pl_isclosed '+
' FROM price_lines pl, price_headers ph , company cm '+
' WHERE ((pl.pl_treeid = :treeid) '+
' OR (pl.pl_treeid IN ( SELECT pt_id FROM prices_tree '+
'    WHERE pt_parentid =:treeid and pt_isclosed =0)))'+
' AND ph.ph_id = pl.pl_headerid AND cm.cm_id = ph.ph_companyid '+
' AND cm.cm_isclosed = 0 AND ph.ph_isclosed = 0 AND pl.pl_isclosed = 0 '
+ F_FilterToQDataFL+' ) ';
qDataFl.ParamByName('TREEID').AsInteger:=MyNode.ID;
if MyNode.ParentID=0
then qDataFl.ParamByName('NODE').Value:=MyNode.Value
else qDataFl.ParamByName('NODE').Value:=MyNode.ParentValue;
qDataFL.Open;
qDataFL.First;
CBFilter.Clear;
while not QDataFL.EOF do
  begin
  if not VarIsNull(qDataFL['RES'])
  then
    begin
    CBFilter.Items.Add(qDataFL['RES']);
    end;
  qDataFL.Next;
  end;
end;

procedure TFormTree.AddFilterToQData(SFilter: string);
begin
qData.Filtered:=false;
qData.Filter:=qData.Filter+' '+SFilter;
qData.Filtered:=true;
end;

procedure TFormTree.AddFilterToqDataFL(SFilter: string);
begin
F_FilterToqDataFL:=SFilter;
end;

procedure TFormTree.CBFieldsSelect(Sender: TObject);
var i:integer;
begin
F_CBFieldsTitle:=CBFields.Text;
for I := 0 to Grid.Columns.Count - 1 do
  begin
  if F_CBFieldsTitle=Grid.Columns[i].Title.Caption then
    begin
    F_CBFieldsName:=Grid.Columns[i].FieldName;
    break;
    end;
  end;
AddFieldToqDataFL(F_CBFieldsName);
RefreshQDataFL;
end;

procedure TFormTree.BitBtnInsertClick(Sender: TObject);
begin
if (CBFilter.Text<>'') and (F_CBFieldsName<>'') then
  begin
  AddFilterToQData(' and '+F_CBFieldsName+' = '''+CBFilter.Text+'''');
  AddFiltertoQDataFL(' and '+F_CBFieldsName+' = '+''''+CBFilter.Text+'''');
  Panel1.Caption:=Panel1.Caption+ F_CBFieldsTitle+' = '+CBFilter.Text+', ';
  RefreshCBFields;
  ClearCBFilter;
  end;
end;

procedure TFormTree.FormKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
case Key of
  VK_F2: BitBtnInsert.Click;
  VK_F3: ButtonFilterClear.Click;
end;    

end;

procedure TFormTree.ClearFilters;
begin
CBFields.Clear;
CBFilter.Clear;
CBFields.Visible:=true;
CBFilter.Visible:=true;
end;

procedure TFormTree.ClearCBFilter;
begin
CBFilter.Clear;
end;

procedure TFormTree.GridDrawColumnCell(Sender: TObject; const Rect: TRect;
  DataCol: Integer; Column: TColumnEh; State: TGridDrawState);
begin
  inherited;
if VarisNull(qData['TL_Color'])
then TDBGridEh(Sender).Canvas.Brush.Color:=clWhite
else TDBGridEh(Sender).Canvas.Brush.Color:=qData['TL_Color'];
	// Восстанавливаем выделение текущей позиции курсора
	IF  gdSelected   IN State Then
  Begin
		TDBGridEh(Sender).Canvas.Brush.Color:= clHighLight;
		TDBGridEh(Sender).Canvas.Font.Color := clHighLightText;
	End;
	// Просим GRID перерисоваться самому
	TDBGridEh(Sender).DefaultDrawColumnCell(Rect,DataCol,Column,State);
end;

end.
