unit ShowTree;

interface

uses
  Windows, Classes, Graphics, Forms, Controls, Grids, DBGridEh, ComCtrls,
  DB, ZAbstractRODataset, ZDataset, DataModule, StdCtrls, MDIChild, Buttons,
  Mask, DBCtrlsEh, ExtCtrls, CommonUnit, DBGridEhGrouping, ToolCtrlsEh,
  DBGridEhToolCtrls, DynVarsEh, EhLibVCL, GridsEh, DBAxisGridsEh;

type
  TFormTree = class(TFormMDIChild)
    Tree: TTreeView;
    Grid: TDBGridEh;
    DSData: TDataSource;
    qData: TZReadOnlyQuery;
    qDataPL_ID: TIntegerField;
    qDataPL_HEADERID: TIntegerField;
    qDataPL_TREEID: TIntegerField;
    qDataCM_NAME: TStringField;
    qDataCM_ID: TIntegerField;
    qDataPL_PRICE: TFloatField;
    qDataPL_VALUE1: TStringField;
    qDataPL_VALUE2: TStringField;
    qDataPL_VALUE3: TStringField;
    qDataPL_VALUE4: TStringField;
    qDataPL_VALUE5: TStringField;
    qDataPL_VALUE6: TStringField;
    qDataPL_VALUE7: TStringField;
    qDataPL_VALUE8: TStringField;
    qDataPL_VALUE9: TStringField;
    qDataPL_ORDERBY: TIntegerField;
    qDataPL_DATE_UPDATE: TDateTimeField;
    qDataPL_ISCLOSED: TSmallintField;
    qDataPL_PARENT: TStringField;
    qDataPT_VALUE: TStringField;
    qDataCM_CITY: TStringField;
    qDataFl: TZReadOnlyQuery;
    Panel1: TPanel;
    Panel2: TPanel;
    Label1: TLabel;
    CBFields: TComboBox;
    BitBtnInsert: TBitBtn;
    Label2: TLabel;
    CBFilter: TComboBox;
    ButtonFilterClear: TButton;
    qDataTL_COLOR: TIntegerField;
    pnlRight: TPanel;
    pnlTop: TPanel;
    qDataCM_BUSINESS: TStringField;
    strngfldDataCM_HYPERLINK: TStringField;
    chk1: TCheckBox;
    chk2: TCheckBox;
    chk3: TCheckBox;
    chk4: TCheckBox;
    chk5: TCheckBox;
    procedure TreeChange(Sender: TObject; Node: TTreeNode);
    procedure TreeExpanding(Sender: TObject; Node: TTreeNode;
      var AllowExpansion: Boolean);
    procedure GridCellClick(Column: TColumnEh);
    procedure GridDblClick(Sender: TObject);
    procedure GridEnter(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure GridTitleClick(Column: TColumnEh);
    procedure ButtonFilterClearClick(Sender: TObject);
    procedure CBFieldsSelect(Sender: TObject);
    procedure BitBtnInsertClick(Sender: TObject);
    procedure FormKeyUp(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure GridDrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumnEh; State: TGridDrawState);
    procedure chk1Click(Sender: TObject);
    procedure chk2Click(Sender: TObject);
    procedure chk3Click(Sender: TObject);
    procedure chk4Click(Sender: TObject);
    procedure chk5Click(Sender: TObject);
    procedure GridKeyUp(Sender: TObject; var Key: Word;
      Shift: TShiftState);
  private
    F_CBFieldsName, F_CBFieldsTitle:string;
    F_LastSorted: string;

    F_FieldName1, F_FieldName2: string;
    F_Column1Name, F_Column1Title: string;
    procedure RefreshQData;
    procedure RefreshQDataFL;
    procedure RefreshCBFields;
    procedure RefreshCaptions;
  public
    MyNode: TNodeValue;
    F_ColumnName, F_ColumnTitle: string;
    Filter:TFilter;
    procedure SetTree;
  end;

implementation

uses
  SysUtils, ShowCompany, Variants, Dialogs, ShowPrice, MainForm, ChangePrice;

{$R *.DFM}

procedure TFormTree.TreeChange(Sender: TObject; Node: TTreeNode);
var
  NextParent, LastParent: Integer;
begin
  if MyNode.ParentID = 0 then LastParent:= MyNode.Id else LastParent:= MyNode.ParentID;
  MyNode.Id:= Integer(Tree.Selected.Data);
  if MyNode.ParentID = 0 then NextParent:= MyNode.Id else NextParent:= MyNode.ParentID;
  if NextParent <> LastParent then
    begin
    ButtonFilterClear.Click;
    end
  else
    begin
    RefreshQData;
    RefreshCBFields;
    end;
end;

procedure TFormTree.TreeExpanding(Sender: TObject; Node: TTreeNode;
  var AllowExpansion: Boolean);
begin
  MyNode.Id:= Integer(Node.Data);
  RefreshQData;
end;

procedure TFormTree.GridCellClick(Column: TColumnEh);
begin
  F_FieldName2:= F_FieldName1;
  F_FieldName1:= Column.FieldName;
end;

procedure TFormTree.GridDblClick(Sender: TObject);
var
  LCompanyShow: TFormCompaniesShow;
  LFormPriceShow: TFormPriceShow;
  LFormPriceChange: TFormPriceChange;
  link:string;
  BK:TBookmark;
begin
if varIsNull(qData['CM_ID']) then Exit;
if (F_FieldName1 = 'CM_NAME') then
    begin
    LCompanyShow:= TFormCompaniesShow.Create(Application);
    LCompanyShow.SetCompany(qData['CM_ID']);
    LCompanyShow.Caption:= 'Компания ' + qData['CM_NAME'];
    LCompanyShow.Show;
    Exit;
    end;
if (F_FieldName1 = 'CM_HYPERLINK') and not VarIsNull(QData['CM_HYPERLINK']) then
  begin
    link:= QData.Fields.FieldByName('CM_HYPERLINK').AsString;
    ShellOpen(Application.Handle, link);
    Exit;
  end;
if (F_FieldName1 = 'PL_PRICE') and not VarIsNull(QData['PL_ID']) then
  begin
    LFormPriceChange:= TFormPriceChange.Create(Application);
    LFormPriceChange.SetNewPrice(qData['PL_ID'], qData['PL_TREEID']);
    LFormPriceChange.ShowModal;
    BK:=QData.BookMark;
    RefreshQData;
    qData.Bookmark:=BK;
    Exit;
  end;
LFormPriceShow:= TFormPriceShow.Create(Application);
LFormPriceShow.SetTree(qData['PL_TREEID']);
LFormPriceShow.Caption:= 'Рубрика ' + MyNode.Value;
end;

procedure TFormTree.GridEnter(Sender: TObject);
begin
  F_FieldName1:= 'CM_NAME';
end;

procedure TFormTree.FormCreate(Sender: TObject);
begin
  MyNode:= TNodeValue.Create;
end;

procedure TFormTree.FormDestroy(Sender: TObject);
begin
  MyNode.Free;
end;

procedure TFormTree.SetTree;
begin
  F_FieldName1:= '';
  F_FieldName2:= '';
  F_Column1Name:= '';
  F_Column1Title:= '';
  DM.TreeFulFill(Tree, True, 0);
  Filter.ClearAll;
  RefreshQData;
  RefreshCBFields;
  CBFilter.Clear;
end;

procedure TFormTree.GridTitleClick(Column: TColumnEh);
begin
  //qData.SortedFields:=Column.FieldName;
  if F_LastSorted = Column.FieldName then
  begin
    QData.SortedFields:= Column.FieldName;
    QData.SortType:= stDescending;
  end
  else
  begin
    QData.SortedFields:= Column.FieldName;
    QData.SortType:= stAscending;
  end;
  F_LastSorted:= Column.FieldName;
  if VarIsNull(qData['PL_ID']) then Exit;
  F_ColumnName:= Column.FieldName;
  F_ColumnTitle:= Column.Title.Caption;
end;

procedure TFormTree.ButtonFilterClearClick(Sender: TObject);
begin
  Filter.ClearAll;
  RefreshQData;
  RefreshCBFields;
  CBFilter.Clear;
end;

procedure TFormTree.RefreshCBFields;
var
  I: Integer;
begin
CBFields.Clear;
CBFields.Text:= Grid.Columns[0].Title.Caption;
for I:= 0 to Grid.Columns.Count - 1 do
  begin
    if Grid.Columns[I].Title.Caption = 'Раздел' then
      Continue;
    if Grid.Columns[I].Title.Caption = 'Подраздел' then
      Continue;
    CBFields.Items.Add(Grid.Columns[I].Title.Caption);
  end;
CBFields.Text:= '';
CBFilter.Clear;
end;

procedure TFormTree.RefreshQDataFL;
var FieldsName:string;
begin
if F_CBFieldsName='' then FieldsName:= '1' else FieldsName:=F_CBFieldsName;
qDataFl.Close;
qDataFl.SQL.Text:= 'select distinct ' +
  FieldsName + ' as res from (' +
  ' SELECT pl_id, pl_headerid, pl.pl_treeid, pl_price, ' +
  ' cast(:node as varchar(200)) as pl_parent, ' +
  ' (select pt_value from prices_tree pt where pt.pt_id = pl.pl_treeid) pt_value, ' +
  ' cm.cm_name, cm.cm_id, cm_city, cm_business, cm_hyperlink, pl_value1, pl_value2, pl_value3, ' +
  ' pl_value4, pl_value5, pl_value6, pl_value7, pl_value8, pl_value9, ' +
  ' pl_orderby, pl_date_update, pl_isclosed ' +
  ' FROM price_lines pl, price_headers ph , company cm ' +
  ' WHERE ((pl.pl_treeid = :treeid) ' +
  ' OR (pl.pl_treeid IN ( SELECT pt_id FROM prices_tree ' +
  '    WHERE pt_parentid =:treeid and pt_isclosed =0)))' +
  ' AND ph.ph_id = pl.pl_headerid AND cm.cm_id = ph.ph_companyid ' +
  ' AND cm.cm_isclosed = 0 AND ph.ph_isclosed = 0 AND pl.pl_isclosed = 0 '+
  ' and upper(cm_name) like ''%''||:company||''%'' '+
  ' and (upper(cm_city) like upper(''%''||:CITY||''%'') or (cast(:CITY as varchar(100))  = '''')) '+
  ' and (upper(cm_business) like ''%''||:business||''%'' or (cast(:business as varchar(100)) ='''') ) ';
qDataFl.SQL.Add(Filter.Query);
qDataFl.SQL.Add(')');
qDataFL.ParamByName('Company').AsString:= AnsiUpperCase(Filter.CompanyLike);
qDataFL.ParamByName('City').AsString:= AnsiUpperCase(Filter.City);
qDataFL.ParamByName('Business').AsString:= AnsiUppercase(Filter.Business);
qDataFL.ParamByName('TREEID').AsInteger:= MyNode.Id;
if MyNode.ParentID = 0 then  qDataFL.ParamByName('NODE').Value:= MyNode.Value
else  qDataFL.ParamByName('NODE').Value:= MyNode.ParentValue;
qDataFL.Open;
qDataFL.First;
CBFilter.Clear;
  while not QDataFL.EOF do
  begin
    if not VarIsNull(qDataFL['RES']) then
    begin
      CBFilter.Items.Add(qDataFL['RES']);
    end;
    qDataFL.Next;
  end;
end;

procedure TFormTree.CBFieldsSelect(Sender: TObject);
var
  I: Integer;
begin
  F_CBFieldsTitle:= CBFields.Text;
  for I:= 0 to Grid.Columns.Count - 1 do
  begin
    if F_CBFieldsTitle = Grid.Columns[I].Title.Caption then
    begin
      F_CBFieldsName:= Grid.Columns[I].FieldName;
      Break;
    end;
  end;
  RefreshQDataFL;
end;

procedure TFormTree.BitBtnInsertClick(Sender: TObject);
begin
if Filter.Counter=5 then
  begin
  MessageDlg('Количество фильтров ограничено пятью',mtWarning, [mbOK],0);
  Exit;
  end;
  if (CBFilter.Text <> '') and (F_CBFieldsName <> '') then
  begin
  if CBFields.Text='Поставщик' then
      begin
      Filter.CompanyLike:=AnsiUpperCase(CBFilter.Text);
      Filter.AddFilter(F_CBFieldsName, CBFields.Text,CBFilter.Text);
      end
  else
  if CBFields.Text='Вид деятельности' then
      begin
      Filter.Business:=AnsiUpperCase(CBFilter.Text);
      Filter.AddFilter(F_CBFieldsName, CBFields.Text,CBFilter.Text);
      end
  else
      begin
      Filter.AddFilter(F_CBFieldsName, CBFields.Text,CBFilter.Text);
      end;
  RefreshQData;
  RefreshCBFields;
  CBFilter.Clear;
  end; 
end;

procedure TFormTree.FormKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  case Key of
    VK_F2: BitBtnInsert.Click;
    VK_F3: ButtonFilterClear.Click;
  end;

end;

procedure TFormTree.GridDrawColumnCell(Sender: TObject; const Rect: TRect;
  DataCol: Integer; Column: TColumnEh; State: TGridDrawState);
begin
  inherited;
  if VarisNull(qData['TL_Color']) then
    TDBGridEh(Sender).Canvas.Brush.Color:= clWhite
  else
    TDBGridEh(Sender).Canvas.Brush.Color:= qData['TL_Color'];
  // Восстанавливаем выделение текущей позиции курсора
  if gdSelected in State then
  begin
    TDBGridEh(Sender).Canvas.Brush.Color:= clHighLight;
    TDBGridEh(Sender).Canvas.Font.Color:= clHighLightText;
  end;
  // Просим GRID перерисоваться самому
  TDBGridEh(Sender).DefaultDrawColumnCell(Rect, DataCol, Column, State);
end;

procedure TFormTree.RefreshCaptions;
begin
Chk1.Caption:=Filter.Caption(1);
Chk1.Visible:=(Chk1.Caption<>'');
Chk2.Caption:=Filter.Caption(2);
Chk2.Visible:=(Chk2.Caption<>'');
Chk3.Caption:=Filter.Caption(3);
Chk3.Visible:=(Chk3.Caption<>'');
Chk4.Caption:=Filter.Caption(4);
Chk4.Visible:=(Chk4.Caption<>'');
Chk5.Caption:=Filter.Caption(5);
Chk5.Visible:=(Chk5.Caption<>'');
end;

procedure TFormTree.RefreshQData;
begin
RefreshCaptions;
qData.Close;
qData.SQL.Text:='SELECT pl_id, pl_headerid, pl.pl_treeid, pl_price, '+
' cast(:node as varchar(200)) as pl_parent, '+
' (select pt_value from prices_tree pt '+
'  where pt.pt_id = pl.pl_treeid '+
'  and pt_isclosed =0) pt_value, '+
' cm.cm_name, cm.cm_id, cm_city,  cm_business, cm_hyperlink,  tl_color, '+
' pl_value1, pl_value2, pl_value3, pl_value4, pl_value5, pl_value6, '+
' pl_value7, pl_value8, pl_value9, pl_orderby, pl_date_update, pl_isclosed '+
' FROM price_lines pl, price_headers ph , company cm '+
' left join TRUSTLEVEL tl on tl.tl_id = cm.cm_trust '+
' WHERE ((pl.pl_treeid = :treeid) '+
' OR (pl.pl_treeid IN '+
'    (SELECT pt_id FROM prices_tree WHERE pt_parentid =:treeid and pt_isclosed =0) '+
'     )) '+
' AND ph.ph_id = pl.pl_headerid AND cm.cm_id = ph.ph_companyid '+
' AND cm.cm_isclosed = 0 AND ph.ph_isclosed = 0 AND pl.pl_isclosed = 0 '+
' AND upper(cm_name) like ''%''||:company||''%'' '+
' and (upper(cm_city) like upper(''%''||:CITY||''%'') or (cast(:CITY as varchar(100))  = '''')) '+
' AND (upper(cm_business) like ''%''||:business||''%'' or (cast(:business as varchar(100)) ='''') )';
qData.SQL.Add(Filter.Query);
qData.ParamByName('Company').AsString:= AnsiUpperCase(Filter.CompanyLike);
qData.ParamByName('City').AsString:= AnsiUpperCase(Filter.City);
qData.ParamByName('Business').AsString:= AnsiUppercase(Filter.Business);
qData.ParamByName('TREEID').AsInteger:= MyNode.Id;
if MyNode.ParentID = 0 then  qData.ParamByName('NODE').Value:= MyNode.Value
else  qData.ParamByName('NODE').Value:= MyNode.ParentValue;
qData.Open;
if MyNode.ParentID <> 0 then DM.RepaintGrid(Grid, MyNode.ParentID)
else DM.RepaintGrid(Grid, MyNode.Id);
end;

procedure TFormTree.chk1Click(Sender: TObject);
begin
  inherited;
  Filter.RemoveFilter(1);
  RefreshQData;
  RefreshCBFields;
  CBFilter.Clear;
end;

procedure TFormTree.chk2Click(Sender: TObject);
begin
  inherited;
  Filter.RemoveFilter(2);
  RefreshQData;
  RefreshCBFields;
  CBFilter.Clear;
end;

procedure TFormTree.chk3Click(Sender: TObject);
begin
  inherited;
  Filter.RemoveFilter(3);
  RefreshQData;
  RefreshCBFields;
  CBFilter.Clear;
end;

procedure TFormTree.chk4Click(Sender: TObject);
begin
  inherited;
  Filter.RemoveFilter(4);
  RefreshQData;
  RefreshCBFields;
  CBFilter.Clear;
end;

procedure TFormTree.chk5Click(Sender: TObject);
begin
  inherited;
  Filter.RemoveFilter(5);
  RefreshQData;
  RefreshCBFields;
  CBFilter.Clear;
end;

procedure TFormTree.GridKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
var  LFormPriceChange: TFormPriceChange;
  BK:TBookmarkStr;
begin
  inherited;
  case Key of
  VK_Insert: if not VarIsNull(QData['PL_ID']) then
    begin
    LFormPriceChange:= TFormPriceChange.Create(Application);
    LFormPriceChange.SetNewPrice(QData['PL_ID'], QData['PL_TREEID']);
    LFormPriceChange.ShowModal;
    BK:=QData.BookMark;
    RefreshQData;
    qData.Bookmark:=BK;
    end;
  end;
end;

end.

